---
format: gfm
jupyter: python3
---

# pydefm: Python bindings for defm


|      CI              | status |
|----------------------|--------|
| conda.recipe         | [![Conda Actions Status][actions-conda-badge]][actions-conda-link] |
| pip builds           | [![Pip Actions Status][actions-pip-badge]][actions-pip-link] |

This is a python wrapper of the [`barry c++` library][barry-git], and in
particular, of the `defm` module that provides utilities for fitting
discrete exponential family models. This is possible using the
[`pybind11`][] library (which rocks!).

[`pybind11`]: https://pybind11.readthedocs.io/en/stable/

The `defm` module is already
[implemented in R](https://github.com/UofUEpiBio/defm){target="_blank"} and it
can be used to count motifs and build Markov Random fields and other models like
ERGMs. More information in [this preprint](https://arxiv.org/abs/2211.00627).


[barry-git]: https://github.com/USCbiostats/barry
[gitter-badge]:            https://badges.gitter.im/pybind/Lobby.svg
[gitter-link]:             https://gitter.im/pybind/Lobby
[actions-badge]:           https://github.com/UofUEpiBio/pydefm/workflows/Tests/badge.svg
[actions-conda-link]:      https://github.com/UofUEpiBio/pydefm/actions?query=workflow%3AConda
[actions-conda-badge]:     https://github.com/UofUEpiBio/pydefm/workflows/Conda/badge.svg
[actions-pip-link]:        https://github.com/UofUEpiBio/pydefm/actions?query=workflow%3APip
[actions-pip-badge]:       https://github.com/UofUEpiBio/pydefm/workflows/Pip/badge.svg
[actions-wheels-link]:     https://github.com/UofUEpiBio/pydefm/actions?query=workflow%3AWheels
[actions-wheels-badge]:    https://github.com/UofUEpiBio/pydefm/workflows/Wheels/badge.svg

## Installation


- clone this repository
- `pip install ./pydefm`


## CI Examples


There are examples for CI in `.github/workflows`. A simple way to produces
binary "wheels" for all platforms is illustrated in the "wheels.yml" file,
using [`cibuildwheel`][].


Test call
---------

```{python}
import pydefm as m
import numpy as np

y = np.column_stack(
  (np.array([0, 0, 1, 1, 1, 1]),
  np.array([0, 1, 1, 0, 0, 1]))
)

x = np.array([1, 2.0, 3.4, 3, 1, 2])
id = np.array([1, 1, 1, 2, 2, 2])

obj = m.new_defm(id, y, x, column_major = False)

# Printing the object on screen shows it is a pointer
obj
```


Adding terms via formula

```{python}
#| echo: true
#| output: true
m.term_formula(obj, "{y0}")
m.term_formula(obj, "{y1}")
m.term_formula(obj, "{0y0, y1}")
obj.init()
obj.print() # Right now, printing shows at the end of the screen
```

```{python}
counts = m.get_stats(obj)
counts
```

Notice the first two columns coincide with the `y` array:

```{python}
y
```

Currently, the C++ code uses `printf` to print to the screen, which is a different buffer from Python (the problem will be solved using [this](https://pybind11.readthedocs.io/en/stable/advanced/pycpp/utilities.html?highlight=print#using-python-s-print-function-in-c){target="_blank"}).

```{python}
# Checking if the data is recovered
m.print_y(obj)
```

[`cibuildwheel`]:          https://cibuildwheel.readthedocs.io
